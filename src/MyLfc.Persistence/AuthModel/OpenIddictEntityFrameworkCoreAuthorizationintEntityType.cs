// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using OpenIddict.EntityFrameworkCore.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyLfc.Persistence.AuthModel
{
    internal partial class OpenIddictEntityFrameworkCoreAuthorizationintEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>",
                typeof(OpenIddictEntityFrameworkCoreAuthorization<int>),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var applicationId = runtimeEntityType.AddProperty(
                "ApplicationId",
                typeof(int?),
                nullable: true);
            applicationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var concurrencyToken = runtimeEntityType.AddProperty(
                "ConcurrencyToken",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("ConcurrencyToken", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<ConcurrencyToken>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                maxLength: 50);
            concurrencyToken.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var properties = runtimeEntityType.AddProperty(
                "Properties",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Properties", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Properties>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            properties.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scopes = runtimeEntityType.AddProperty(
                "Scopes",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Scopes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Scopes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            scopes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            status.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subject = runtimeEntityType.AddProperty(
                "Subject",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Subject", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Subject>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 400);
            subject.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(string),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            type.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { applicationId, status, subject, type });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ApplicationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var application = declaringEntityType.AddNavigation("Application",
                runtimeForeignKey,
                onDependent: true,
                typeof(OpenIddictEntityFrameworkCoreApplication<int>),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Application", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreAuthorization<int, OpenIddictEntityFrameworkCoreApplication<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Application>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var authorizations = principalEntityType.AddNavigation("Authorizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OpenIddictEntityFrameworkCoreAuthorization<int>>),
                propertyInfo: typeof(OpenIddictEntityFrameworkCoreApplication<int, OpenIddictEntityFrameworkCoreAuthorization<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetProperty("Authorizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OpenIddictEntityFrameworkCoreApplication<int, OpenIddictEntityFrameworkCoreAuthorization<int>, OpenIddictEntityFrameworkCoreToken<int>>).GetField("<Authorizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "OpenIddictAuthorizations");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
